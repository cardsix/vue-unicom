"use strict";function _defineProperty(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};!function(t,e){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):e()}(0,function(){function t(e,n){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];if("[object array]"==o.call(e).toLowerCase())for(var r=0;r<e.length;r+=1)t(e[r],n,i);else if(e){var a=String(e);n&&(c[a]||(c[a]=[]),c[a].push(n)),i.push(a)}return i}function e(t,e){return function(){var n=Array.prototype.slice.call(arguments),i=n.shift(),r=n.shift();i&&(r&&e[p]!=i||!r&&(!e[u]||e[u].indexOf(i)<0))||t.apply(e,n)}}function n(){var t=Array.prototype.slice.call(arguments),e="",n=!1,i=String(t[0]).replace(/([@#])([^@#]*)$/,function(t,i,r){return e=r,n="#"==i,""});t.splice(0,1,i,e,n,this),a.emit.apply(a,t)}function i(r){var h=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},y=h.name,v=void 0===y?"unicom":y,d=h.sendName,m=h.groupName,_=h.idName;if(!i.installed){i.installed=!0,r.prototype["$"+(d||v+"Send")]=n,u=m||v+"Name",Object.defineProperty(r.prototype,"$"+(m||v+"VM"),{get:function(){return c}}),p=_||v+"Id",Object.defineProperty(r.prototype,"$"+p,{get:function(){return l}}),r.mixin({props:_defineProperty({},p,{type:String,default:""}),beforeCreate:function(){var n=this.$options,i=n[v];if(i){var r={};for(var c in i){r[c]=[],"[object array]"!=o.call(i[c]).toLowerCase()&&(i[c]=[i[c]]);for(var p=0;p<i[c].length;p+=1)if(i[c][p]){var h=e(i[c][p],this);r[c].push(h),a.on(c,h)}}s.push(r),f.push(this)}this[u]=t(n[u],this);var y=(this.$options.propsData||{}).unicomId;y&&(l[y]=this)},destroyed:function(){var t=this,e=f.indexOf(this);if(e>=0){var n=s[e];f.splice(e,1),s.splice(e,1);for(var i in n)!function(t){n[t].forEach(function(e){a.off(t,e)})}(i)}this[u].forEach(function(e){var n=c[e];if(n){var i=n.indexOf(t);i>-1&&n.splice(i,1),0==n.length&&delete c[e]}});var r=this.unicomId;r&&l[r]&&delete l[r]}});var g=r.config.optionMergeStrategies;g[v]=g.watch,g[u]=function(t,e){var n=[];return t&&n.push(t),e&&n.push(e),n}}}var r=(Array.prototype.slice,function(){function t(){_classCallCheck(this,t),this._monitor_=Object.assign({},this._monitor_||{})}return _createClass(t,[{key:"on",value:function(t,e){var n=this._monitor_||(this._monitor_={});return n[t]||(n[t]=[]),n[t].push(e),this}},{key:"hasEvent",value:function(t){return(this._monitor_&&this._monitor_[t]||[]).length>0||!!this["on"+t]}},{key:"onec",value:function(t,e){function n(){e.apply(this,arguments),this.off(t,n)}return this.on(t,n),this}},{key:"off",value:function(t,e){var n=this._monitor_;if(n)if(e){var i=n[t];if(i){var r=i.indexOf(e);r>-1&&i.splice(r,1)}}else t?delete n[t]:delete this._monitor_;return this}},{key:"emit",value:function(t){for(var e=this._monitor_&&this._monitor_[t]||[],n=arguments.length,i=Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];if(e.length)for(var o=0;o<e.length;o+=1)e[o].apply(this,i);var a=this["on"+t];return a&&a.apply(this,i),this}},{key:"assign",value:function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return"string"==typeof e[0]?this.assign(_defineProperty({},e[0],e[1])):(e.unshift(this),Object.assign.apply(Object,e)),this}}]),t}()),o=Object.prototype.toString,a=new r,f=[],s=[],u="",c={},l={},p="";return window.Vue&&i(window.Vue),{EventEmitter:r,unicom:a,install:i}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
