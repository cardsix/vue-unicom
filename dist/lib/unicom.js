"use strict";function _defineProperty(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};!function(t,e){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):e()}(0,function(){function t(t,e,n){e!=n&&(n&&delete c[n],e&&(c[e]=t))}function e(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];if("[object array]"==a.call(t).toLowerCase())for(var o=0;o<t.length;o+=1)e(t[o],n,r);else if(t){var i=String(t);n&&(l[i]||(l[i]=[]),l[i].push(n)),r.push(i)}return r}function n(t,e){return function(){var n=Array.prototype.slice.call(arguments),r=n.shift(),o=n.shift(),i=o?null:u.get(e).group;r&&(o&&e[p]!=r||i&&i.indexOf(r)<0)||t.apply(e,n)}}function r(t){var e="",n=!1,r=t.replace(/([@#])([^@#]*)$/,function(t,r,o){return e=o,n="#"==r,""});if(r){for(var o=arguments.length,i=Array(o>1?o-1:0),a=1;a<o;a++)i[a-1]=arguments[a];return i.unshift(r,e,n,this),f.emit.apply(f,i)}return n?c[e]:l[e]}function o(i){var c=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},h=c.name,y=void 0===h?"unicom":h,v=c.idName,d=c.groupName;if(!o.installed){o.installed=!0,i.prototype["$"+y]=r,p=v||y+"Id",s=d||y+"Name",i.mixin({props:_defineProperty({},p,{type:String,default:""}),beforeCreate:function(){var r=this.$options,o=r[y],i={},l=!1;if(o){var c=i.uni={};for(var p in o){l=!0,c[p]=[],"[object array]"!=a.call(o[p]).toLowerCase()&&(o[p]=[o[p]]);for(var h=0;h<o[p].length;h+=1)if(o[p][h]){var v=n(o[p][h],this);c[p].push(v),f.on(p,v)}}}i.group=e(r[s],this),i.group.length>0&&(l=!0);var d=(this.$options.propsData||{}).unicomId;d&&t(this,d),l&&u.set(this,i)},watch:{unicomId:function(e,n){t(this,e,n)}},destroyed:function(){var e=this,n=this.unicomId;n&&t(this,void 0,n);var r=u.get(this);if(r){var o=r.uni;for(var i in o)!function(t){o[t].forEach(function(e){f.off(t,e)})}(i);r.group.forEach(function(t){var n=l[t];if(n){var r=n.indexOf(e);r>-1&&n.splice(r,1),0==n.length&&delete l[t]}})}}});var m=i.config.optionMergeStrategies;m[y]=m.watch,m[s]=function(t,e){var n=[];return t&&n.push(t),e&&n.push(e),n}}}var i=(Array.prototype.slice,function(){function t(){_classCallCheck(this,t),this._monitor_=Object.assign({},this._monitor_||{})}return _createClass(t,[{key:"on",value:function(t,e){var n=this._monitor_||(this._monitor_={});return n[t]||(n[t]=[]),n[t].push(e),this}},{key:"off",value:function(t,e){var n=this._monitor_;if(n)if(e){var r=n[t];if(r){var o=r.indexOf(e);o>-1&&r.splice(o,1)}}else t?delete n[t]:delete this._monitor_;return this}},{key:"emit",value:function(t){var e=this._monitor_&&this._monitor_[t]||[],n=[];if(e.length){for(var r=arguments.length,o=Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];for(var a=0;a<e.length;a+=1)n.push(e[a].apply(this,o))}return this}}]),t}()),a=Object.prototype.toString,f=new i,u=new Map,s="",l={},c={},p="";return window.Vue&&o(window.Vue),{EventEmitter:i,install:o}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
