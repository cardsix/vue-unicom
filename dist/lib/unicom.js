"use strict";function _defineProperty(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};!function(t,e){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):e()}(0,function(){function t(t,e,n){e!=n&&(n&&delete p[n],e&&(p[e]=t))}function e(t,n){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];if("[object array]"==a.call(t).toLowerCase())for(var r=0;r<t.length;r+=1)e(t[r],n,i);else if(t){var o=String(t);n&&(l[o]||(l[o]=[]),l[o].push(n)),i.push(o)}return i}function n(t,e){return function(){var n=Array.prototype.slice.call(arguments),i=n.shift(),r=n.shift();i&&(r&&e[h]!=i||!r&&(!e[c]||e[c].indexOf(i)<0))||t.apply(e,n)}}function i(){var t=Array.prototype.slice.call(arguments),e="",n=!1,i=String(t[0]).replace(/([@#])([^@#]*)$/,function(t,i,r){return e=r,n="#"==i,""});t.splice(0,1,i,e,n,this),f.emit.apply(f,t)}function r(o){var y=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},v=y.name,d=void 0===v?"unicom":v,m=y.sendName,_=y.groupName,g=y.idName;if(!r.installed){r.installed=!0,o.prototype["$"+(m||d+"Send")]=i,c=_||d+"Name",Object.defineProperty(o.prototype,"$"+(_||d+"VM"),{get:function(){return l}}),h=g||d+"Id",Object.defineProperty(o.prototype,"$"+h,{get:function(){return p}}),o.mixin({props:_defineProperty({},h,{type:String,default:""}),beforeCreate:function(){var i=this.$options,r=i[d];if(r){var o={};for(var l in r){o[l]=[],"[object array]"!=a.call(r[l]).toLowerCase()&&(r[l]=[r[l]]);for(var p=0;p<r[l].length;p+=1)if(r[l][p]){var h=n(r[l][p],this);o[l].push(h),f.on(l,h)}}u.push(o),s.push(this)}this[c]=e(i[c],this);var y=(this.$options.propsData||{}).unicomId;y&&t(this,y)},watch:{unicomId:function(e,n){t(this,e,n)}},destroyed:function(){var e=this,n=s.indexOf(this);if(n>=0){var i=u[n];s.splice(n,1),u.splice(n,1);for(var r in i)!function(t){i[t].forEach(function(e){f.off(t,e)})}(r)}this[c].forEach(function(t){var n=l[t];if(n){var i=n.indexOf(e);i>-1&&n.splice(i,1),0==n.length&&delete l[t]}});var o=this.unicomId;o&&t(this,void 0,o)}});var b=o.config.optionMergeStrategies;b[d]=b.watch,b[c]=function(t,e){var n=[];return t&&n.push(t),e&&n.push(e),n}}}var o=(Array.prototype.slice,function(){function t(){_classCallCheck(this,t),this._monitor_=Object.assign({},this._monitor_||{})}return _createClass(t,[{key:"on",value:function(t,e){var n=this._monitor_||(this._monitor_={});return n[t]||(n[t]=[]),n[t].push(e),this}},{key:"hasEvent",value:function(t){return(this._monitor_&&this._monitor_[t]||[]).length>0||!!this["on"+t]}},{key:"onec",value:function(t,e){function n(){e.apply(this,arguments),this.off(t,n)}return this.on(t,n),this}},{key:"off",value:function(t,e){var n=this._monitor_;if(n)if(e){var i=n[t];if(i){var r=i.indexOf(e);r>-1&&i.splice(r,1)}}else t?delete n[t]:delete this._monitor_;return this}},{key:"emit",value:function(t){for(var e=this._monitor_&&this._monitor_[t]||[],n=arguments.length,i=Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];if(e.length)for(var o=0;o<e.length;o+=1)e[o].apply(this,i);var a=this["on"+t];return a&&a.apply(this,i),this}},{key:"assign",value:function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return"string"==typeof e[0]?this.assign(_defineProperty({},e[0],e[1])):(e.unshift(this),Object.assign.apply(Object,e)),this}}]),t}()),a=Object.prototype.toString,f=new o,s=[],u=[],c="",l={},p={},h="";return window.Vue&&r(window.Vue),{EventEmitter:o,install:r}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
